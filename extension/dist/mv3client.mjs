// scripts/client.ts
console.debug("[vite] connecting...");
var socketProtocol = location.protocol === "https:" ? "wss" : "ws";
var socketHost = "localhost:3303";
var base = "/";
var messageBuffer = [];
var enableOverlay = true;
var hotModulesMap = /* @__PURE__ */ new Map();
var disposeMap = /* @__PURE__ */ new Map();
var pruneMap = /* @__PURE__ */ new Map();
var dataMap = /* @__PURE__ */ new Map();
var customListenersMap = /* @__PURE__ */ new Map();
var ctxToListenersMap = /* @__PURE__ */ new Map();
var socket;
try {
  socket = new WebSocket(`${socketProtocol}://${socketHost}`, "vite-hmr");
  socket.addEventListener("message", async ({ data }) => {
    handleMessage(JSON.parse(data));
  });
  socket.addEventListener("close", async ({ wasClean }) => {
    if (wasClean)
      return;
    console.log("[vite] server connection lost. polling for restart...");
    await waitForSuccessfulPing();
    location.reload();
  });
} catch (error) {
  console.error(`[vite] failed to connect to websocket (${error}). `);
}
function warnFailedFetch(err, path) {
  if (!err.message.match("fetch"))
    console.error(err);
  console.error(
    `[hmr] Failed to reload ${path}. This could be due to syntax errors or importing non-existent modules. (see errors above)`
  );
}
function cleanUrl(pathname) {
  const url = new URL(pathname, location.toString());
  url.searchParams.delete("direct");
  return url.pathname + url.search;
}
var isFirstUpdate = true;
async function handleMessage(payload) {
  switch (payload.type) {
    case "connected":
      console.debug("[vite] connected.");
      sendMessageBuffer();
      setInterval(() => socket.send('{"type":"ping"}'), 5e3);
      break;
    case "update":
      notifyListeners("vite:beforeUpdate", payload);
      if (isFirstUpdate && hasErrorOverlay()) {
        window.location.reload();
        return;
      } else {
        clearErrorOverlay();
        isFirstUpdate = false;
      }
      payload.updates.forEach((update) => {
        if (update.type === "js-update") {
          queueUpdate(fetchUpdate(update));
        } else {
          const { path, timestamp } = update;
          const searchUrl = cleanUrl(path);
          const el = Array.from(document.querySelectorAll("link")).find(
            (e) => cleanUrl(e.href).includes(searchUrl)
          );
          if (el) {
            const newPath = `${base}${searchUrl.slice(1)}${searchUrl.includes("?") ? "&" : "?"}t=${timestamp}`;
            el.href = new URL(newPath, el.href).href;
          }
          console.log(`[vite] css hot updated: ${searchUrl}`);
        }
      });
      break;
    case "custom": {
      notifyListeners(payload.event, payload.data);
      break;
    }
    case "full-reload":
      notifyListeners("vite:beforeFullReload", payload);
      if (payload.path && payload.path.endsWith(".html")) {
        const pagePath = decodeURI(location.pathname);
        const payloadPath = base + payload.path.slice(1);
        if (pagePath === payloadPath || payload.path === "/index.html" || pagePath.endsWith("/") && `${pagePath}index.html` === payloadPath)
          location.reload();
      } else {
        location.reload();
      }
      break;
    case "prune":
      notifyListeners("vite:beforePrune", payload);
      payload.paths.forEach((path) => {
        const fn = pruneMap.get(path);
        if (fn)
          fn(dataMap.get(path));
      });
      break;
    case "error": {
      notifyListeners("vite:error", payload);
      const err = payload.err;
      if (enableOverlay)
        createErrorOverlay(err);
      else
        console.error(`[vite] Internal Server Error
${err.message}
${err.stack}`);
      break;
    }
    default: {
      const check = payload;
      return check;
    }
  }
}
function notifyListeners(event, data) {
  const cbs = customListenersMap.get(event);
  if (cbs)
    cbs.forEach((cb) => cb(data));
}
function createErrorOverlay(_err) {
  if (!enableOverlay)
    return;
  clearErrorOverlay();
}
function clearErrorOverlay() {
}
function hasErrorOverlay() {
  return false;
}
var pending = false;
var queued = [];
async function queueUpdate(p) {
  queued.push(p);
  if (!pending) {
    pending = true;
    await Promise.resolve();
    pending = false;
    const loading = [...queued];
    queued = [];
    (await Promise.all(loading)).forEach((fn) => fn && fn());
  }
}
async function waitForSuccessfulPing(ms = 1e3) {
  while (true) {
    try {
      await fetch(`${location.protocol}//${socketHost}`);
      break;
    } catch (e) {
      await new Promise((resolve) => setTimeout(resolve, ms));
    }
  }
}
var supportsConstructedSheet = (() => {
  return false;
})();
var sheetsMap = /* @__PURE__ */ new Map();
function updateStyle(id, content) {
  let style = sheetsMap.get(id);
  if (supportsConstructedSheet && !content.includes("@import")) {
    if (style && !(style instanceof CSSStyleSheet)) {
      removeStyle(id);
      style = void 0;
    }
    if (!style) {
      style = new CSSStyleSheet();
      style.replaceSync(content);
      document.adoptedStyleSheets = [...document.adoptedStyleSheets, style];
    } else {
      style.replaceSync(content);
    }
  } else {
    if (style && !(style instanceof HTMLStyleElement)) {
      removeStyle(id);
      style = void 0;
    }
    if (!style) {
      style = document.createElement("style");
      style.setAttribute("type", "text/css");
      style.innerHTML = content;
      document.head.appendChild(style);
    } else {
      style.innerHTML = content;
    }
  }
  sheetsMap.set(id, style);
}
function removeStyle(id) {
  const style = sheetsMap.get(id);
  if (style) {
    if (style instanceof CSSStyleSheet)
      document.adoptedStyleSheets = document.adoptedStyleSheets.filter(
        (s) => s !== style
      );
    else
      document.head.removeChild(style);
    sheetsMap.delete(id);
  }
}
async function fetchUpdate({ path, acceptedPath, timestamp }) {
  let mod = hotModulesMap.get(path);
  if (!mod) {
    mod = hotModulesMap.get(path.replace(/\.js$/, ""));
    if (!mod) {
      return;
    }
    path = path.replace(/\.js$/, "");
    acceptedPath = acceptedPath.replace(/\.js$/, "");
  }
  const moduleMap = /* @__PURE__ */ new Map();
  const isSelfUpdate = path === acceptedPath;
  const modulesToUpdate = /* @__PURE__ */ new Set();
  if (isSelfUpdate) {
    modulesToUpdate.add(path);
  } else {
    for (const { deps } of mod.callbacks) {
      deps.forEach((dep) => {
        if (acceptedPath === dep)
          modulesToUpdate.add(dep);
      });
    }
  }
  const qualifiedCallbacks = mod.callbacks.filter(({ deps }) => {
    return deps.some((dep) => modulesToUpdate.has(dep));
  });
  await Promise.all(
    Array.from(modulesToUpdate).map(async (dep) => {
      const disposer = disposeMap.get(dep);
      if (disposer)
        await disposer(dataMap.get(dep));
      const [path2, query] = dep.split("?");
      try {
        const newMod = await import(
          /* @vite-ignore */
          normalizeScriptUrl(`${base + path2.slice(1)}.js${query ? `_${query}` : ""}`, timestamp)
        );
        moduleMap.set(dep, newMod);
      } catch (e) {
        warnFailedFetch(e, dep);
      }
    })
  );
  return () => {
    for (const { deps, fn } of qualifiedCallbacks)
      fn(deps.map((dep) => moduleMap.get(dep)));
    const loggedPath = isSelfUpdate ? path : `${acceptedPath} via ${path}`;
    console.log(`[vite] hot updated: ${loggedPath}`);
  };
}
function normalizeScriptUrl(url, timestamp) {
  if (!url.endsWith(".js") && !url.endsWith(".mjs"))
    url = `${url}.js`;
  return `${url}?t=${timestamp}`;
}
function sendMessageBuffer() {
  if (socket.readyState === 1) {
    messageBuffer.forEach((msg) => socket.send(msg));
    messageBuffer.length = 0;
  }
}
function createHotContext(ownerPath) {
  if (!dataMap.has(ownerPath))
    dataMap.set(ownerPath, {});
  const mod = hotModulesMap.get(ownerPath);
  if (mod)
    mod.callbacks = [];
  const staleListeners = ctxToListenersMap.get(ownerPath);
  if (staleListeners) {
    for (const [event, staleFns] of staleListeners) {
      const listeners = customListenersMap.get(event);
      if (listeners) {
        customListenersMap.set(
          event,
          listeners.filter((l) => !staleFns.includes(l))
        );
      }
    }
  }
  const newListeners = /* @__PURE__ */ new Map();
  ctxToListenersMap.set(ownerPath, newListeners);
  function acceptDeps(deps, callback = () => {
  }) {
    const mod2 = hotModulesMap.get(ownerPath) || {
      id: ownerPath,
      callbacks: []
    };
    mod2.callbacks.push({
      deps,
      fn: callback
    });
    hotModulesMap.set(ownerPath, mod2);
  }
  const hot = {
    get data() {
      console.log("ViteHotContext data", { dataMap, ownerPath });
      return dataMap.get(ownerPath);
    },
    accept(deps, callback) {
      if (typeof deps === "function" || !deps) {
        acceptDeps([ownerPath], ([mod2]) => deps && deps(mod2));
      } else if (typeof deps === "string") {
        acceptDeps([deps], ([mod2]) => callback && callback(mod2));
      } else if (Array.isArray(deps)) {
        acceptDeps(deps, callback);
      } else {
        throw new TypeError("invalid hot.accept() usage.");
      }
    },
    dispose(cb) {
      disposeMap.set(ownerPath, cb);
    },
    // @ts-expect-error untyped
    prune(cb) {
      pruneMap.set(ownerPath, cb);
    },
    // TODO
    decline() {
    },
    invalidate() {
      location.reload();
    },
    // custom events
    on(event, cb) {
      const addToMap = (map) => {
        const existing = map.get(event) || [];
        existing.push(cb);
        map.set(event, existing);
      };
      addToMap(customListenersMap);
      addToMap(newListeners);
    },
    send(event, data) {
      messageBuffer.push(JSON.stringify({ type: "custom", event, data }));
      sendMessageBuffer();
    }
  };
  return hot;
}
function injectQuery(url, queryToInject) {
  if (!url.startsWith(".") && !url.startsWith("/"))
    return url;
  const pathname = url.replace(/#.*$/, "").replace(/\?.*$/, "");
  const { search, hash } = new URL(url, "http://vitejs.dev");
  return `${pathname}?${queryToInject}${search ? `&${search.slice(1)}` : ""}${hash || ""}`;
}
export {
  createHotContext,
  injectQuery,
  removeStyle,
  updateStyle
};
//# sourceMappingURL=data:application/json;base64,